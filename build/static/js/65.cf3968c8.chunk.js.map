{"version":3,"sources":["app/services/encryption.service.js","app/views/sessions/Signin.jsx"],"names":["dotenv","decryptData","ciphertext","decryptionKey","process","slice","key","CryptoJS","Utf8","parse","console","log","iv","substring","padding","Pkcs7","mode","CBC","encrypted_text","decrypt","toString","SigninSchema","yup","shape","email","required","password","min","Signin","props","state","app_settings","SYSTEM_AUTHENTICATION","SYSTEM_ALIASES","loadingSettings","isSubmitting","PRIMARY_COLOR","SECONDARY_COLOR","getUserFromParams","urlParams","usn","usac","encryptionService","handleChange","event","persist","setState","target","name","value","handleSubmit","a","loginWithEmailAndPassword","getAppSettings","appMainService","then","SERVER_URL","jwtAuthService","setAppSettings","window","location","href","this","catch","error","appSettingsResponse","forEach","setting","NAME","AppMainService","login","success","loading","queryString","search","Object","keys","length","AD_LOGON","AppNotification","type","msg","user","active","spinner","text","className","src","alt","style","backgroundImage","initialValues","validationSchema","onSubmit","values","errors","touched","handleBlur","htmlFor","onChange","onBlur","disabled","backgroundColor","to","backgroundSize","COMPANY_NAME","Component","connect","PropTypes","func","isRequired"],"mappings":"8jBAEAA,SAOO,IAcMC,EAAc,SAACC,GAC1B,IAAIC,EAAgBC,+CAAqCC,MAAM,EAAE,IAE3DC,EAAMC,MAAaC,KAAKC,MAAMN,GAGrCO,QAAQC,IAAI,MAAOR,GAElB,IAAMS,EAAKL,MAAaC,KAAKC,MAAMP,EAAWW,UAAU,EAAG,KACrDC,EAAUP,MAAaQ,MACvBC,EAAOT,OAAcU,IACrBC,EAAiBhB,EAAWW,UAAU,IAO5C,OAFoBN,MAAaY,QAAQD,EAAgBZ,EAAK,CAAEM,KAAII,OAAMF,YAEzDM,SAASb,MAAaC,O,+CCvBnCa,EAAeC,WAAaC,MAAM,CACtCC,MAAOF,WAEJE,MAAM,iBACNC,SAAS,qBACZC,SAAUJ,WAEPK,IAAI,EAAG,qCACPF,SAAS,0BAGRG,E,kDAeJ,WAAYC,GAAO,IAAD,8BACd,cAAMA,IAfVC,MAAQ,CACNN,MAAO,GACPE,SAAU,GACVK,aAAa,CACXC,sBAAsB,GACtBC,eAAe,IAEjBC,iBAAgB,EAChBC,cAAa,EACbC,cAAc,iBACdC,gBAAgB,mBAIA,EAuDpBC,kBAAoB,SAACC,GAAc,IAI7BC,EAAcD,EAAdC,IAAKC,EAASF,EAATE,KAILjB,EAAQkB,EAA8BF,GACtCd,EAAWgB,EAA8BD,GAI/C,OAHA/B,QAAQC,IAAI,CAACa,QAAOE,aAGb,CACLF,MAAM,YACNE,SAAS,gBAtES,EA2ElBiB,aAAe,SAAAC,GACbA,EAAMC,UACN,EAAKC,SAAL,eAAiBF,EAAMG,OAAOC,KAAOJ,EAAMG,OAAOE,SA7ElC,EAgFlBC,aAhFkB,uCAgFH,WAAOD,EAAP,YAAAE,EAAA,+DAAgBhB,aAC7B,EAAKW,SAAS,CAAEX,cAAa,IADhB,SAEP,EAAKN,MAAMuB,0BAA0BH,GAF9B,2CAhFG,0DAsFlBI,eAtFkB,sBAsFD,4BAAAF,EAAA,6DACA,EACTjB,EAAoB,EAAKJ,MAAzBI,gBACNA,GAAkB,EAHH,SAIT,EAAKY,SAAS,CAAEZ,oBAJP,OAKX,EAAKoB,eAAeD,iBAAiBE,KAArC,uCACE,WAAOxB,GAAP,qBAAAoB,EAAA,sDACUnB,EAAuED,EAAvEC,sBAAuBwB,EAAgDzB,EAAhDyB,WAAYpB,EAAoCL,EAApCK,cAAgBC,EAAoBN,EAApBM,gBAC3DH,EAA2C,oBAAzBF,EAElByB,IAAeC,eAAe3B,GAC3BG,IACDyB,OAAOC,SAASC,KAAhB,UAA0BL,EAA1B,cAGF,EAAKV,SAAS,CAAEZ,kBAAiBH,eAAcK,gBAAgBC,oBAE/D3B,QAAQC,IAAI,eAAgBoB,GAX9B,2CADF,kCAAA+B,KAAA,gBAaKC,OAAM,SAACC,GACR9B,GAAkB,EAClB,EAAKY,SAAS,CAAEZ,uBApBT,2CAtFC,EA+GlBwB,eAAiB,SAACO,GAAwB,IAClClC,EAAiB,EAAKD,MAAtBC,aACNkC,EAAoBC,SAAQ,SAACC,GAAW,IAC9BC,EAASD,EAATC,KACPrC,EAAaqC,GAAQD,KAExB,EAAKrB,SAAS,CAACf,iBAEfrB,QAAQC,IAAI,wBAAwBoB,IArHlC,EAAKuB,eAAiB,IAAIe,IAFZ,E,sEAMQxC,GAAO,IACvByC,EAAUzC,EAAVyC,MACJA,EAAMC,SAAYD,EAAME,SAC1BV,KAAKhB,SAAS,CAAEX,cAAa,M,mKAO3BD,EAAoB4B,KAAKhC,MAAzBI,gBAEAK,EAAYkC,IAAYhE,MAAMqD,KAAKjC,MAAM+B,SAASc,Q,SAMlDC,OAAOC,KAAKrC,GAAWsC,O,gCACjBf,KAAKT,iB,mCAGLyB,EAAavC,EAAbuC,WACiB,SAAVA,E,iBACb,IAAIC,IAAgB,CAClBC,KAAK,QACLC,IAAI,uEAENnB,KAAKhB,SAAS,CAAEZ,iBAAgB,I,yCAEb4B,KAAKxB,kBAAkBC,G,QAApC2C,E,OACLpB,KAAKjC,MAAMuB,0BAA0B8B,GAEtCpB,KAAKhB,SAAS,CAAEZ,oB,0DAMpB,IAAI6C,IAAgB,CAClBC,KAAK,QACLC,IAAI,8DAEJnB,KAAKhB,SAAS,CAAEZ,iBAAgB,I,+IA0E1B,IAAD,SAEmE4B,KAAKhC,MAAvEI,EAFD,EAECA,gBAAiBE,EAFlB,EAEkBA,cAAgCL,GAFlD,EAEiCM,gBAFjC,EAEkDN,cAEzD,OAAOG,EAEH,kBAAC,IAAD,CACEiD,OAAQjD,EACRkD,SAAO,EACPC,KAAK,gCACH,yBAAKC,UAAU,eACb,yBAAKC,IAAI,0BAA0BC,IAAI,OAAOF,UAAU,kBAOhE,yBACEA,UAAU,mBACVG,MAAO,CACLC,gBAAiB,0CAGnB,yBAAKJ,UAAU,0BACb,yBAAKA,UAAU,iBACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,YACb,yBAAKA,UAAU,OACb,yBAAKA,UAAU,8BACb,yBAAKC,IAAI,0BAA0BC,IAAI,MAEzC,wBAAIF,UAAU,gBAAd,WACA,kBAAC,IAAD,CACEK,cAAe7B,KAAKhC,MACpB8D,iBAAkBvE,EAClBwE,SAAU/B,KAAKZ,eAEd,gBACC4C,EADD,EACCA,OACAC,EAFD,EAECA,OAEApD,GAJD,EAGCqD,QAHD,EAICrD,cACAsD,EALD,EAKCA,WACA/C,EAND,EAMCA,aAND,EAOCf,aAPD,OASC,0BAAM0D,SAAU3C,GACd,yBAAKoC,UAAU,cACb,2BAAOY,QAAQ,SAAf,iBACA,2BACEZ,UAAU,sDACVN,KAAK,QACLhC,KAAK,QACLmD,SAAUxD,EACVyD,OAAQH,EACRhD,MAAO6C,EAAOtE,QAEfuE,EAAOvE,OACN,yBAAK8D,UAAU,yBACZS,EAAOvE,QAId,yBAAK8D,UAAU,cACb,2BAAOY,QAAQ,YAAf,YACA,2BACEZ,UAAU,oCACVN,KAAK,WACLhC,KAAK,WACLmD,SAAUxD,EACVyD,OAAQH,EACRhD,MAAO6C,EAAOpE,WAEfqE,EAAOrE,UACN,yBAAK4D,UAAU,yBACZS,EAAOrE,WAId,4BACE4D,UAAU,4CACVN,KAAK,SACLqB,SAAU,EAAKvE,MAAMK,aACrBsD,MAAO,CAACa,gBAAgBlE,IAJ1B,WAOI,EAAKN,MAAMK,aAAgB,kBAAC,IAAD,CAAOmD,UAAU,SAAY,UAOlE,yBAAKA,UAAU,oBACb,kBAAC,IAAD,CAAMiB,GAAG,mBAAmBjB,UAAU,cACpC,mDAKR,yBACEA,UAAU,wBACVG,MAAO,CACLe,eAAgB,QAChBd,gBAAiB,yCAGnB,yBAAKJ,UAAU,cAGX,wBAAIA,UAAU,mBAAkB,mCAAKvD,QAAL,IAAKA,OAAL,EAAKA,EAAc0E,eACnD,wBAAInB,UAAU,cAAa,kE,GA1P1BoB,aA0RNC,uBAPS,SAAA7E,GAAK,MAAK,CAChCsB,0BAA2BwD,IAAUC,KAAKC,WAC1C5B,KAAMpD,EAAMoD,KACZZ,MAAMxC,EAAMwC,MACZnC,aAAcL,EAAMK,gBAGkB,CACtCiB,+BADauD,CAEZ/E","file":"static/js/65.cf3968c8.chunk.js","sourcesContent":["import * as CryptoJS from \"crypto-js\";\nimport * as dotenv from \"dotenv\";\ndotenv.config();\n/**\n *\n * @param {*} data\n *\n * This method is used to encrypt tokens\n */\nexport const encryptData = (data) =>{\n\n  const encryptionKey = process.env.ENCRYPTION_KEY;\n  const ciphertext = CryptoJS.AES.encrypt(JSON.stringify(data), encryptionKey).toString();\n  return ciphertext;\n}\n\n\n/**\n *\n * @param {*} data\n *\n * This function is used to decrypt tokens\n */\nexport const decryptData = (ciphertext)=>{\n  let decryptionKey = process.env.REACT_APP_DECRYPTION_KEY.slice(0,16);\n  // decryptionKey = btoa(decryptionKey);\n  const key = CryptoJS.enc.Utf8.parse(decryptionKey);\n\n\n console.log('KEY', decryptionKey)\n\n  const iv = CryptoJS.enc.Utf8.parse(ciphertext.substring(0, 16));\n  const padding = CryptoJS.pad.Pkcs7;\n  const mode = CryptoJS.mode.CBC\n  const encrypted_text = ciphertext.substring(16);\n\n  // Decrypt\n  // const plainText = CryptoJS.AES.decrypt({ ciphertext:  encrypted_text}, decryptionKey, {iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7}).toString(CryptoJS.enc.Utf8);\n\n    const plainText = CryptoJS.AES.decrypt(encrypted_text, key, { iv, mode, padding });\n  // console.log('plainText', plainText);\n  return plainText.toString(CryptoJS.enc.Utf8);\n  //\n  // return new_decrypt(encrypted_text, decryptionKey)\n\n}\n\nexport const new_decrypt = (ciphertext, decryptionKey)=>{\n\n\n\n\n  // Decode the base64 data so we can separate iv and crypt text.\n   // var rawData = atob(data);\n   // Split by 16 because my IV size\n   var iv = ciphertext.substring(0, 16);\n   var crypttext = ciphertext.substring(16);\n\n\n\n   //Parsers\n   // crypttext = CryptoJS.enc.Utf8.parse(crypttext);\n\n   const uint8array = new TextEncoder().encode(crypttext);\n   crypttext = new TextDecoder('utf-8').decode(uint8array);\n\n\n   console.log(\"CRYPTEXTXTX+N\", crypttext)\n   iv = CryptoJS.enc.Utf8.parse(iv);\n  var key = CryptoJS.enc.Utf8.parse(decryptionKey);\n\n\n\n   // Decrypt\n   var plaintextArray = CryptoJS.AES.decrypt(\n     { ciphertext:  crypttext},\n     key,\n     {iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7}\n   );\n\n   const output_plaintext = plaintextArray.toString(CryptoJS.enc.Utf8)\n   // CryptoJS.enc.Utf8.stringify(plaintextArray);\n   console.log(\"plain text : \" + output_plaintext);\n}\n\nexport const setCharAt = (str,index,chr) => {\n    if(index > str.length-1) return str;\n    return str.substring(0,index) + chr + str.substring(index+1);\n}\n","import React, { Component } from \"react\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { loginWithEmailAndPassword } from \"app/redux/actions/LoginActions\";\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"react-bootstrap\";\nimport AppMainService from \"../../services/appMainService\";\nimport jwtAuthService from \"app/services/jwtAuthService\";\nimport AppNotification from \"app/appNotifications\";\n\nimport * as encryptionService from \"../../services/encryption.service\";\nimport LoadingOverlay from 'react-loading-overlay';\nimport queryString from \"query-string\";\nimport { FaCog } from \"react-icons/fa\";\n\n\nconst SigninSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email(\"Invalid email\")\n    .required(\"email is required\"),\n  password: yup\n    .string()\n    .min(8, \"Password must be 8 character long\")\n    .required(\"password is required\")\n});\n\nclass Signin extends Component {\n  state = {\n    email: \"\",\n    password: \"\",\n    app_settings:{\n      SYSTEM_AUTHENTICATION:{},\n      SYSTEM_ALIASES:{}\n    },\n    loadingSettings:true,\n    isSubmitting:false,\n    PRIMARY_COLOR:\"rgb(36,47,106)\" ,\n    SECONDARY_COLOR:\"rgb(23,162,184)\"\n  };\n  appMainService;\n\n  constructor(props){\n      super(props);\n      this.appMainService = new AppMainService();\n\n  }\n\n  componentWillReceiveProps(props){\n    const { login } = props;\n    if(!login.success && !login.loading){\n      this.setState({ isSubmitting:false})\n    }\n    \n  }\n\nasync componentDidMount(){\n\n  let { loadingSettings } = this.state;\n\n  const urlParams = queryString.parse(this.props.location.search);\n\n  // console.log(urlParams, \"dsjhjhjdfhjfdhj\");\n  // console.log('Login props',this.props);\n  //\n  try{\n    if(!Object.keys(urlParams).length){\n        await this.getAppSettings();\n    }\n    else{\n      const { AD_LOGON } = urlParams;\n      if(AD_LOGON && AD_LOGON=='ERROR'){\n        new AppNotification({\n          type:\"error\",\n          msg:\"Active directory logon failed. Please login here or contact Admin.\"\n        });\n        this.setState({ loadingSettings:false });\n      }else{\n        const user = await this.getUserFromParams(urlParams);\n         this.props.loginWithEmailAndPassword(user);\n        // loadingSettings = false;\n        this.setState({ loadingSettings });\n      }\n\n\n    }\n  }catch(e){\n    new AppNotification({\n      type:\"error\",\n      msg:\"Access attempt failed. Please try again or contact admin.\"\n    });\n      this.setState({ loadingSettings:false });\n  }\n\n\n}\n\ngetUserFromParams = (urlParams) => {\n\n// decryptparrams\n\nlet { usn, usac } = urlParams;\n// usn.replace(/\" \"/g,\"+\")\n// usac.replace(/\" \"/g,\"+\")\n\nconst email = encryptionService.decryptData(usn);\nconst password = encryptionService.decryptData(usac);\nconsole.log({email, password})\n\n\nreturn {\n  email:\"er@er.com\",\n  password:\"password123\"\n}\n\n}\n\n  handleChange = event => {\n    event.persist();\n    this.setState({ [event.target.name]: event.target.value });\n  };\n\n  handleSubmit = async (value, { isSubmitting }) => {\n    this.setState({ isSubmitting:true });\n    await this.props.loginWithEmailAndPassword(value);\n\n  };\n\n  getAppSettings = async () => {\n    const applied= true;\n    let { loadingSettings } = this.state;\n    loadingSettings = true;\n    await this.setState({ loadingSettings })\n        this.appMainService.getAppSettings().then(\n          async (app_settings) => {\n            const { SYSTEM_AUTHENTICATION, SERVER_URL, PRIMARY_COLOR , SECONDARY_COLOR}  = app_settings;\n            loadingSettings = SYSTEM_AUTHENTICATION == \"ACTIVE_DIRECTORY\";\n\n            jwtAuthService.setAppSettings(app_settings);\n            if(loadingSettings){\n              window.location.href = `${SERVER_URL}/ad/logon`;\n            }\n\n            this.setState({ loadingSettings, app_settings, PRIMARY_COLOR , SECONDARY_COLOR });\n\n            console.log(\"app_settings\", app_settings)\n          }).catch((error)=>{\n            loadingSettings = false;\n            this.setState({ loadingSettings })\n\n      })\n  }\n\n  setAppSettings = (appSettingsResponse)=> {\n    let { app_settings } = this.state;\n    appSettingsResponse.forEach((setting)=>{\n      const { NAME } = setting;\n       app_settings[NAME] = setting\n    })\n    this.setState({app_settings});\n\n    console.log(\"APP SETTINGS Response\",app_settings );\n\n  }\n\n  render() {\n\n    const { loadingSettings, PRIMARY_COLOR, SECONDARY_COLOR, app_settings } = this.state;\n\n    return loadingSettings ?\n      (\n        <LoadingOverlay\n          active={loadingSettings}\n          spinner\n          text='Resolving Authentication ...'>\n            <div className=\"full-screen\">\n              <img src=\"/assets/images/logo.png\" alt=\"Logo\" className=\"modal-logox\"  />\n\n            </div>\n        </LoadingOverlay>\n      )\n\n    : (\n      <div\n        className=\"auth-layout-wrap\"\n        style={{\n          backgroundImage: \"url(/assets/images/user-depts_bg.png)\"\n        }}\n      >\n        <div className=\"auth-content shadow-lg\">\n          <div className=\"card o-hidden\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <div className=\"p-4\">\n                  <div className=\"auth-logo text-center mb-4\">\n                    <img src=\"/assets/images/logo.png\" alt=\"\" />\n                  </div>\n                  <h1 className=\"mb-3 text-18\">Sign In</h1>\n                  <Formik\n                    initialValues={this.state}\n                    validationSchema={SigninSchema}\n                    onSubmit={this.handleSubmit}\n                  >\n                    {({\n                      values,\n                      errors,\n                      touched,\n                      handleChange,\n                      handleBlur,\n                      handleSubmit,\n                      isSubmitting\n                    }) => (\n                      <form onSubmit={handleSubmit}>\n                        <div className=\"form-group\">\n                          <label htmlFor=\"email\">Email address</label>\n                          <input\n                            className=\"form-control form-control-rounded position-relative\"\n                            type=\"email\"\n                            name=\"email\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.email}\n                          />\n                          {errors.email && (\n                            <div className=\"text-danger mt-1 ml-2\">\n                              {errors.email}\n                            </div>\n                          )}\n                        </div>\n                        <div className=\"form-group\">\n                          <label htmlFor=\"password\">Password</label>\n                          <input\n                            className=\"form-control form-control-rounded\"\n                            type=\"password\"\n                            name=\"password\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.password}\n                          />\n                          {errors.password && (\n                            <div className=\"text-danger mt-1 ml-2\">\n                              {errors.password}\n                            </div>\n                          )}\n                        </div>\n                        <button\n                          className=\"btn btn-rounded text-white btn-block mt-2\"\n                          type=\"submit\"\n                          disabled={this.state.isSubmitting}\n                          style={{backgroundColor:PRIMARY_COLOR}}\n                        >\n                          Sign In {\n                            this.state.isSubmitting ? (<FaCog className='spin'/>) : null\n                          }\n                        </button>\n                      </form>\n                    )}\n                  </Formik>\n\n                  <div className=\"mt-3 text-center\">\n                    <Link to=\"/forgot-password\" className=\"text-muted\">\n                      <u>Forgot Password?</u>\n                    </Link>\n                  </div>\n                </div>\n              </div>\n              <div\n                className=\"col-md-6 text-center \"\n                style={{\n                  backgroundSize: \"cover\",\n                  backgroundImage: \"url(/assets/images/photo-long-3.jpg)\"\n                }}\n              >\n                <div className=\"auth-right\">\n\n\n                    <h3 className=\"text-white mb-1\"><em>{app_settings?.COMPANY_NAME}</em></h3>\n                    <h4 className=\"text-white\"><b>Budget Management Portal</b></h4>\n                  {/* <Link\n                    to=\"/session/signup\"\n                    className=\"btn btn-rounded btn-outline-primary btn-outline-email btn-block btn-icon-text\"\n                  >\n                    <i className=\"i-Mail-with-At-Sign\"></i> Sign up with Email\n                  </Link>\n\n                  <Button className=\"btn btn-rounded btn-outline-google btn-block btn-icon-text\">\n                    <i className=\"i-Google-Plus\"></i> Sign up with Google\n                  </Button>\n                  <Button className=\"btn btn-rounded btn-block btn-icon-text btn-outline-facebook\">\n                    <i className=\"i-Facebook-2\"></i> Sign up with Facebook\n                  </Button> */}\n\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  loginWithEmailAndPassword: PropTypes.func.isRequired,\n  user: state.user,\n  login:state.login,\n  isSubmitting: state.isSubmitting\n});\n\nexport default connect(mapStateToProps, {\n  loginWithEmailAndPassword\n})(Signin);\n"],"sourceRoot":""}