{"version":3,"sources":["../node_modules/react-bootstrap/esm/Row.js","../node_modules/react-bootstrap/esm/Badge.js","app/views/ui-kits/badges/AppBadge.jsx","../node_modules/react-bootstrap/esm/Col.js"],"names":["DEVICE_SIZES","Row","React","forwardRef","_ref","ref","bsPrefix","className","noGutters","_ref$as","as","Component","props","_objectWithoutPropertiesLoose","decoratedBsPrefix","useBootstrapPrefix","sizePrefix","classes","forEach","brkPoint","cols","propValue","infix","push","createElement","_extends","classNames","apply","concat","displayName","defaultProps","Badge","variant","pill","prefix","AppBadge","variantList","state","routeSegments","name","path","Col","lg","md","sm","xs","SimpleCard","title","this","map","color","key","ind","to","i","String","fromCharCode","spans","span","offset","order","_propValue$span","length"],"mappings":"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","file":"static/js/90.c09dd354.chunk.js","sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar DEVICE_SIZES = ['xl', 'lg', 'md', 'sm', 'xs'];\nvar defaultProps = {\n  noGutters: false\n};\nvar Row = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      noGutters = _ref.noGutters,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"noGutters\", \"as\"]);\n\n  var decoratedBsPrefix = useBootstrapPrefix(bsPrefix, 'row');\n  var sizePrefix = decoratedBsPrefix + \"-cols\";\n  var classes = [];\n  DEVICE_SIZES.forEach(function (brkPoint) {\n    var propValue = props[brkPoint];\n    delete props[brkPoint];\n    var cols;\n\n    if (propValue != null && typeof propValue === 'object') {\n      cols = propValue.cols;\n    } else {\n      cols = propValue;\n    }\n\n    var infix = brkPoint !== 'xs' ? \"-\" + brkPoint : '';\n    if (cols != null) classes.push(\"\" + sizePrefix + infix + \"-\" + cols);\n  });\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames.apply(void 0, [className, decoratedBsPrefix, noGutters && 'no-gutters'].concat(classes))\n  }));\n});\nRow.displayName = 'Row';\nRow.defaultProps = defaultProps;\nexport default Row;","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar defaultProps = {\n  pill: false\n};\nvar Badge = React.forwardRef(function (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      variant = _ref.variant,\n      pill = _ref.pill,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'span' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"variant\", \"pill\", \"className\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'badge');\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    ref: ref\n  }, props, {\n    className: classNames(className, prefix, pill && prefix + \"-pill\", variant && prefix + \"-\" + variant)\n  }));\n});\nBadge.displayName = 'Badge';\nBadge.defaultProps = defaultProps;\nexport default Badge;","import React, { Component } from \"react\";\nimport { Breadcrumb } from \"@gull\";\nimport OutlinedBadge from \"@gull/components/badges/OutlinedBadge\";\nimport SimpleCard from \"@gull/components/cards/SimpleCard\";\nimport { Badge, Row, Col } from \"react-bootstrap\";\nimport { Link } from \"react-router-dom\";\n\nclass AppBadge extends Component {\n  variantList = [\n    \"primary\",\n    \"secondary\",\n    \"success\",\n    \"danger\",\n    \"warning\",\n    \"info\",\n    \"light\",\n    \"dark\"\n  ];\n\n  state = {};\n\n  render() {\n    return (\n      <div>\n        <Breadcrumb\n          routeSegments={[\n            { name: \"UI Kits\", path: \"/uikits\" },\n            { name: \"Badges\" }\n          ]}\n        ></Breadcrumb>\n        <div className=\"mb-3\">\n          <Row>\n            <Col lg={6} md={6} sm={6} xs={12}>\n              <SimpleCard title=\"Badge outline\">\n                {this.variantList.map(color => (\n                  <Badge\n                    key={color}\n                    pill\n                    className={`badge-outline-${color} p-2 m-1`}\n                  >\n                    {color}\n                  </Badge>\n                ))}\n              </SimpleCard>\n            </Col>\n            <Col lg={6} md={6} sm={6} xs={12}>\n              <SimpleCard title=\"Regular Badges\">\n                {this.variantList.map(color => (\n                  <Badge key={color} variant={color} className=\"m-1\">\n                    {color}\n                  </Badge>\n                ))}\n              </SimpleCard>\n            </Col>\n          </Row>\n        </div>\n\n        <div className=\"mb-3\">\n          <Row>\n            <Col lg={6} md={6} sm={6} xs={12}>\n              <SimpleCard title=\"Badge Pill\">\n                {this.variantList.map(color => (\n                  <Badge key={color} pill variant={color} className=\"m-1\">\n                    {color}\n                  </Badge>\n                ))}\n              </SimpleCard>\n            </Col>\n            <Col lg={6} md={6} sm={6} xs={12}>\n              <SimpleCard title=\"Badge Pill with Padding\">\n                {this.variantList.map(color => (\n                  <Badge key={color} pill variant={color} className=\"p-2 m-1\">\n                    {color}\n                  </Badge>\n                ))}\n              </SimpleCard>\n            </Col>\n          </Row>\n        </div>\n\n        <div className=\"mb-3\">\n          <Row>\n            <Col lg={6} md={6} sm={6} xs={12}>\n              <SimpleCard title=\"Badge link\">\n                {this.variantList.map((color, ind) => (\n                  <Link to=\"/uikits/badges\" key={ind}>\n                    <Badge pill variant={color} className=\"m-1\">\n                      {color}\n                    </Badge>\n                  </Link>\n                ))}\n              </SimpleCard>\n            </Col>\n          </Row>\n        </div>\n\n        <div className=\"mb-3\">\n          <Row>\n            <Col lg={6} md={6} sm={6} xs={12}>\n              <SimpleCard className=\"mb-3\" title=\"Badge liSizing & Styles\">\n                <ul className=\"list-group list-group-flush\">\n                  <h6 className=\"card-subtitle mt-2 mb-2 text-muted\">\n                    Medium Size\n                  </h6>\n\n                  <li className=\"list-group-item border-0\">\n                    {this.variantList.map((color, i) => (\n                      <Badge key={i} className={`badge-round-${color}  m-1`}>\n                        {String.fromCharCode(65 + i)}\n                      </Badge>\n                    ))}\n                  </li>\n                  <li className=\"list-group-item border-0\">\n                    {this.variantList.map((color, i) => (\n                      <Badge key={i} className={`badge-square-${color}  m-1`}>\n                        {String.fromCharCode(65 + i)}\n                      </Badge>\n                    ))}\n                  </li>\n\n                  <h6 className=\"card-subtitle mt-2 mb-2 text-muted\">\n                    Large Size\n                  </h6>\n\n                  <li className=\"list-group-item border-0\">\n                    {this.variantList.map((color, i) => (\n                      <Badge key={i} className={`badge-round-${color} lg  m-1`}>\n                        {String.fromCharCode(65 + i)}\n                      </Badge>\n                    ))}\n                  </li>\n\n                  <li className=\"list-group-item border-0\">\n                    {this.variantList.map((color, i) => (\n                      <Badge key={i} className={`badge-square-${color} lg m-1`}>\n                        {String.fromCharCode(65 + i)}\n                      </Badge>\n                    ))}\n                  </li>\n\n                  <h6 className=\"card-subtitle mt-2 mb-2 text-muted\">\n                    Extra Large Size\n                  </h6>\n\n                  <li className=\"list-group-item border-0\">\n                    {this.variantList.map((color, i) => (\n                      <Badge key={i} className={`badge-round-${color} xl  m-1`}>\n                        {String.fromCharCode(65 + i)}\n                      </Badge>\n                    ))}\n                  </li>\n\n                  <li className=\"list-group-item border-0\">\n                    {this.variantList.map((color, i) => (\n                      <Badge\n                        key={i}\n                        className={`badge-square-${color} xl  m-1`}\n                      >\n                        {String.fromCharCode(65 + i)}\n                      </Badge>\n                    ))}\n                  </li>\n                </ul>\n              </SimpleCard>\n\n              <SimpleCard title=\"More Styles & Options\">\n                <ul className=\"list-group list-group-flash\">\n                  <h6 className=\"card-subtitle mt-2 mb-2 text-muted\">\n                    Wide badges for longer text:\n                  </h6>\n\n                  <li className=\"list-group-item border-0\">\n                    {this.variantList.map((color, i) => (\n                      <Badge key={i} variant={color} className=\"w-badge m-1\">\n                        {color}\n                      </Badge>\n                    ))}\n                  </li>\n\n                  <h6 className=\"card-subtitle mt-2 mb-2 text-muted\">\n                    Rounded badges examples:\n                  </h6>\n                  <li className=\"list-group-item border-0\">\n                    {this.variantList.map((color, i) => (\n                      <Badge key={i} variant={color} className=\"r-badge m-1\">\n                        {color}\n                      </Badge>\n                    ))}\n                  </li>\n                </ul>\n              </SimpleCard>\n            </Col>\n\n            <Col lg={6} md={6} sm={6} xs={12}>\n              <SimpleCard title=\"Unified Styles\" className=\"mb-3\">\n                <ul className=\"list-group list-group-flash\">\n                  <h6 className=\"card-subtitle mt-2 mb-2 text-muted\">\n                    Circle and Square Unified Styles\n                  </h6>\n\n                  <li className=\"list-group-item border-0\">\n                    {this.variantList.map((color, i) => (\n                      <Badge\n                        key={i}\n                        pill\n                        variant={color}\n                        className={`badge-round badge-round-opacity-${color}  m-1`}\n                      >\n                        {String.fromCharCode(65 + i)}\n                      </Badge>\n                    ))}\n                  </li>\n                </ul>\n              </SimpleCard>\n\n              <SimpleCard title=\"Basic Examples\" className=\"mb-3\">\n                <ul className=\"list-group list-group-flash\">\n                  <h6 className=\"card-subtitle mt-2 mb-2 text-muted\">\n                    Circle and Square Unified Styles\n                  </h6>\n\n                  <li className=\"list-group-item border-0\">\n                    {this.variantList.map((color, i) => (\n                      <Badge\n                        key={i}\n                        variant={color}\n                        className={`badge-round-${color} sm  m-1`}\n                      >\n                        {String.fromCharCode(65 + i)}\n                      </Badge>\n                    ))}\n                  </li>\n                </ul>\n\n                <ul className=\"list-group list-group-flash\">\n                  <h6 className=\"card-subtitle mt-2 mb-2 text-muted\">\n                    Dot Styles Examples:\n                  </h6>\n\n                  <li className=\"list-group-item border-0\">\n                    {this.variantList.map((color, i) => (\n                      <span\n                        key={i}\n                        variant={color}\n                        className={`badge-dot-${color} mr-1`}\n                      ></span>\n                    ))}\n                  </li>\n\n                  <li className=\"list-group-item border-0\">\n                    Pending <span className=\"badge-dot-primary mr-1\"></span>\n                    Caption\n                    <span className=\"badge-dot-secondary mr-1\"></span> Heading\n                    <span className=\"badge-dot-success mr-1\"></span> Status\n                    <span className=\"badge-dot-danger mr-1\"></span>\n                  </li>\n                </ul>\n              </SimpleCard>\n\n              <SimpleCard title=\"Outline Badges\">\n                <ul className=\"list-group list-group-flash\">\n                  <h6 className=\"card-subtitle mt-2 mb-2 text-muted\">\n                    Basic state color badges:\n                  </h6>\n\n                  <li className=\"list-group-item border-0\">\n                    {this.variantList.map((color, i) => (\n                      <Badge\n                        key={i}\n                        className={`outline-round-${color} sm m-1`}\n                      >\n                        {String.fromCharCode(65 + i)}\n                      </Badge>\n                    ))}\n                  </li>\n                </ul>\n              </SimpleCard>\n            </Col>\n          </Row>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default AppBadge;\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutPropertiesLoose from \"@babel/runtime/helpers/esm/objectWithoutPropertiesLoose\";\nimport classNames from 'classnames';\nimport React from 'react';\nimport { useBootstrapPrefix } from './ThemeProvider';\nvar DEVICE_SIZES = ['xl', 'lg', 'md', 'sm', 'xs'];\nvar Col = React.forwardRef( // Need to define the default \"as\" during prop destructuring to be compatible with styled-components github.com/react-bootstrap/react-bootstrap/issues/3595\nfunction (_ref, ref) {\n  var bsPrefix = _ref.bsPrefix,\n      className = _ref.className,\n      _ref$as = _ref.as,\n      Component = _ref$as === void 0 ? 'div' : _ref$as,\n      props = _objectWithoutPropertiesLoose(_ref, [\"bsPrefix\", \"className\", \"as\"]);\n\n  var prefix = useBootstrapPrefix(bsPrefix, 'col');\n  var spans = [];\n  var classes = [];\n  DEVICE_SIZES.forEach(function (brkPoint) {\n    var propValue = props[brkPoint];\n    delete props[brkPoint];\n    var span;\n    var offset;\n    var order;\n\n    if (typeof propValue === 'object' && propValue != null) {\n      var _propValue$span = propValue.span;\n      span = _propValue$span === void 0 ? true : _propValue$span;\n      offset = propValue.offset;\n      order = propValue.order;\n    } else {\n      span = propValue;\n    }\n\n    var infix = brkPoint !== 'xs' ? \"-\" + brkPoint : '';\n    if (span) spans.push(span === true ? \"\" + prefix + infix : \"\" + prefix + infix + \"-\" + span);\n    if (order != null) classes.push(\"order\" + infix + \"-\" + order);\n    if (offset != null) classes.push(\"offset\" + infix + \"-\" + offset);\n  });\n\n  if (!spans.length) {\n    spans.push(prefix); // plain 'col'\n  }\n\n  return /*#__PURE__*/React.createElement(Component, _extends({}, props, {\n    ref: ref,\n    className: classNames.apply(void 0, [className].concat(spans, classes))\n  }));\n});\nCol.displayName = 'Col';\nexport default Col;"],"sourceRoot":""}