{"version":3,"sources":["app/views/sessions/ForgotPassword.jsx"],"names":["ForgotPasswordSchema","yup","shape","email","required","ForgotPassword","props","state","isLoading","PRIMARY_COLOR","SECONDARY_COLOR","COMPANY_NAME","resetResponse","resetTimer","handleChange","event","persist","target","name","value","setState","handleSubmit","isSubmitting","componentDidMount","jwtAuthService","getAppSettings","componentWillUnmount","clearTimeout","checkForgotPassword","appMainService","then","forgotPasswordResponse","a","msg","successNotification","type","AppNotification","setTimeout","console","log","this","catch","error","errorNotification","utils","AppMainService","className","style","backgroundImage","src","alt","initialValues","validationSchema","onSubmit","values","errors","touched","handleBlur","htmlFor","onChange","onBlur","disabled","to","backgroundSize","Component","connect","loginWithEmailAndPassword","PropTypes","func","isRequired","user"],"mappings":"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","file":"static/js/141.0ca8071b.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { Formik } from \"formik\";\nimport * as yup from \"yup\";\nimport { loginWithEmailAndPassword } from \"app/redux/actions/LoginActions\";\nimport jwtAuthService from \"app/services/jwtAuthService\";\nimport AppMainService from \"app/services/appMainService\";\nimport AppNotification from \"app/appNotifications\";\nimport * as utils from \"@utils\";\n\n\nimport PropTypes from \"prop-types\";\nimport { connect } from \"react-redux\";\nimport { Link } from \"react-router-dom\";\nimport { Button } from \"react-bootstrap\";\nimport { FaCog, FaCheckCircle } from \"react-icons/fa\";\n\n\nconst ForgotPasswordSchema = yup.object().shape({\n  email: yup\n    .string()\n    .email(\"Invalid email\")\n    .required(\"email is required\")\n});\n\nclass ForgotPassword extends Component {\n  appMainService;\n\n  constructor(props){\n    super(props);\n    this.appMainService = new AppMainService();\n  }\n\n  state = {\n    email: \"\",\n    isLoading:false,\n    PRIMARY_COLOR:\"rgb(36,47,106)\" ,\n    SECONDARY_COLOR:\"rgb(23,162,184)\",\n    COMPANY_NAME:\"\",\n    resetResponse:\"\",\n    resetTimer:null\n  };\n\n  handleChange = event => {\n    event.persist();\n    const { name, value } = event.target;\n    this.setState({ [name]: value });\n  };\n\n  handleSubmit = (value, { isSubmitting }) => {\n\n    // this.checkForgotPassword(value);\n  };\n\n  componentDidMount = () => {\n    const { PRIMARY_COLOR, SECONDARY_COLOR, COMPANY_NAME } = jwtAuthService.getAppSettings() || {};\n    this.setState({ PRIMARY_COLOR, SECONDARY_COLOR, COMPANY_NAME });\n\n  }\n\n  componentWillUnmount = () =>{\n    const { resetTimer } = this.state;\n    clearTimeout(resetTimer);\n  }\n\n  checkForgotPassword = (value) => {\n\n    const { email } = value;\n    this.setState({isLoading:true})\n   this.appMainService.checkForgotPassword(email).then(\n       async(forgotPasswordResponse)=> {\n         const { msg } = forgotPasswordResponse;\n         const successNotification = {\n             type:'success',\n             msg\n         }\n         new AppNotification(successNotification);\n         this.setState({isLoading:false, resetResponse:`Please check your email at ${email}.`});\n         const resetTimer = setTimeout(()=>{\n           this.setState({resetResponse:\"\",email:\"\"});\n         },3000)\n\n         this.setState({resetTimer})\n\n\n\n           console.log('forgotPasswordResponse ', forgotPasswordResponse)\n       }\n   ).catch((error)=>{\n       this.setState({isLoading:false})\n       const errorNotification = {\n           type:'error',\n           msg:utils.processErrors(error)\n       }\n       new AppNotification(errorNotification)\n   })\n\n  }\n\n  render() {\n    const { PRIMARY_COLOR, SECONDARY_COLOR, COMPANY_NAME, isLoading, resetResponse } = this.state;\n    return (\n      <div\n        className=\"auth-layout-wrap\"\n        style={{\n          backgroundImage: \"url(/assets/images/user-depts_bg.png)\"\n        }}\n      >\n        <div className=\"auth-content\">\n          <div className=\"card o-hidden\">\n            <div className=\"row\">\n              <div className=\"col-md-6\">\n                <div className=\"p-4\">\n                  <div className=\"auth-logo text-center mb-4\">\n                    <img src=\"/assets/images/logo.png\" alt=\"\" />\n                  </div>\n                  <h1 className=\"mb-3 text-18\">Forgot Password</h1>\n                {\n                  resetResponse ? (\n                    <p className='text-success w-100 p-1'><FaCheckCircle/> {resetResponse}</p>\n                  ):null\n                }\n\n                  <Formik\n                    initialValues={this.state}\n                    validationSchema={ForgotPasswordSchema}\n                    onSubmit={this.checkForgotPassword}\n                  >\n                    {({\n                      values,\n                      errors,\n                      touched,\n                      handleChange,\n                      handleBlur,\n                      handleSubmit,\n                      isSubmitting\n                    }) => (\n                      <form onSubmit={handleSubmit}>\n                        <div className=\"form-group\">\n                          <label htmlFor=\"email\">Email address</label>\n                          <input\n                            className=\"form-control form-control-rounded position-relative\"\n                            type=\"email\"\n                            name=\"email\"\n                            onChange={handleChange}\n                            onBlur={handleBlur}\n                            value={values.email}\n                          />\n                          {errors.email && (\n                            <div className=\"text-danger mt-1 ml-2\">\n                              {errors.email}\n                            </div>\n                          )}\n                        </div>\n                        <button\n                          className=\"btn btn-rounded btn-primary btn-block mt-2\"\n                          type=\"submit\"\n                          disabled={isLoading}\n                        >\n                          Reset Password {\n                            isLoading ? (\n                              <FaCog className='spin'/>\n                            ):null\n                          }\n                        </button>\n                      </form>\n                    )}\n                  </Formik>\n\n                  <div className=\"mt-3 text-center\">\n                    <Link to=\"/\" className=\"text-muted\">\n                      <u>Signin</u>\n                    </Link>\n                  </div>\n                </div>\n              </div>\n              <div\n                className=\"col-md-6 text-center \"\n                style={{\n                  backgroundSize: \"cover\",\n                  backgroundImage: \"url(/assets/images/photo-long-3.jpg)\"\n                }}\n              >\n                <div className=\"pr-3 auth-right\">\n                  <h3 className=\"text-white mb-1\"><em>{COMPANY_NAME}</em></h3>\n                  <h4 className=\"text-white\"><b>Budget Management Portal</b></h4>\n                  {/* <Button className=\"btn btn-rounded btn-outline-primary btn-outline-email btn-block btn-icon-text\">\n                    <i className=\"i-Mail-with-At-Sign\"></i> Sign up with Email\n                  </Button>\n                  <Button className=\"btn btn-rounded btn-outline-google btn-block btn-icon-text\">\n                    <i className=\"i-Google-Plus\"></i> Sign up with Google\n                  </Button>\n                  <Button className=\"btn btn-rounded btn-block btn-icon-text btn-outline-facebook\">\n                    <i className=\"i-Facebook-2\"></i> Sign up with Facebook\n                  </Button> */}\n                </div>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({\n  loginWithEmailAndPassword: PropTypes.func.isRequired,\n  user: state.user\n});\n\nexport default connect(mapStateToProps, {\n  loginWithEmailAndPassword\n})(ForgotPassword);\n"],"sourceRoot":""}